plugins {
    id 'com.jfrog.bintray' version '1.8.4'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'pl.allegro.tech.build.axion-release' version '1.10.2'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'com.gradle.plugin-publish'

group = 'com.github.michaelruocco'

scmVersion {
    versionCreator 'versionWithBranch'
    tag {
        prefix = 'gradle-postman-runner'
    }
}
project.version = scmVersion.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compile gradleApi()

    compile 'com.moowork.gradle:gradle-node-plugin:1.3.1'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'com.google.code.gson:gson:2.8.6'

    testCompile 'com.github.tomakehurst:wiremock-jre8:2.25.1'
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name 'BSD License'
            url 'http://www.opensource.org/licenses/bsd-license.php'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'mruoc'
            name 'Michael Ruocco'
            email 'michael.ruocco@hotmail.com'
        }
    }

    scm {
        url 'https://github.com/michaelruocco/gradle-postman-runner'
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId 'gradle-postman-runner'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Gradle plugin to run postman')
                root.appendNode('name', 'gradle-postman-runner')
                root.appendNode('url', 'https://github.com/michaelruocco/gradle-postman-runner')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenPublication']
    publish = true

    pkg {
        repo = 'maven'
        name = 'gradle-postman-runner'
        userOrg = 'michaelruocco'
        licenses = ['bsd']
        websiteUrl = 'https://github.com/michaelruocco/gradle-postman-runner'
        vcsUrl = 'https://github.com/michaelruocco/gradle-postman-runner.git'
        labels = ['postman', 'newman', 'gradle']
        version {
            name = project.version
            desc = project.version
            released  = new Date()
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/michaelruocco/gradle-postman-runner'
    vcsUrl = 'https://github.com/michaelruocco/gradle-postman-runner.git'
    description = 'Gradle plugin to run postman'
    tags = ['postman', 'newman']

    plugins {
        gradlePostmanRunner {
            id = 'gradle-postman-runner'
            displayName = 'Gradle plugin to run postman'
        }
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}